#!/usr/bin/env -S bash
###########################################################
# @Author: dezhaoli@tencent.com
# @Date:   
# Please contact dezhaoli if you have any questions.
###########################################################


# Copyright 2009, The Android Open Source Project

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###########################################################


function _xcomplete()
{
    local XTRACE
    shopt -qo xtrace && set +x && XTRACE=true

    local cur prev words cword i

    function _debug_echo(){
        ${XARGPARES_DEBUG:-false} && echo "$*" >> ~/Desktop/complete.log
        :
    }

    # case: bash-completion installed 
    if [[ -n "$BASH_COMPLETION" ]]; then
        _get_comp_words_by_ref -n : cur prev words cword
        i=1
    else
    # case: bash-completion NOT installed 
        words=( "${COMP_WORDS[@]}" )
        cword=${#COMP_WORDS[@]}
        cur="${COMP_WORDS[COMP_CWORD]}"
        prev="${COMP_WORDS[COMP_CWORD-1]}"
        _filedir()
        {
            local IFS=$'\n' 
            toks=( $(
                compgen -d -- "$cur" | {
                    while read -r tmp; do
                        printf '%s\n' $tmp
                    done
                }
            ))
            COMPREPLY=( "${COMPREPLY[@]}" "${toks[@]}" )
        }
        i=2

    fi
        _debug_echo ''
        _debug_echo "======================================"
        _debug_echo "words=[${words[*]}]" >&2
        _debug_echo "i=[$i]" >&2
        _debug_echo "cword=[$cword]" >&2
        _debug_echo "cur=[$cur]" >&2
        _debug_echo "prev=[$prev]" >&2

    COMPREPLY=()

    local dir=~/".xargparse/bash_completion.d"

    local XARGPARES_CMD_SRC=() p=
    while read p; do XARGPARES_CMD_SRC+=( "$p" ); done < <(cat $dir/"$(basename "${words[0]}")")
    local sub_cmd=
    local sub_cmd_list=( help )
    local -A sub_cmd_alias_map
    local sub_cmd_opts=()
    local line=



    local -A s_optspecs
    local -A l_optspecs
    local p_argspecs=()

    function _reset_arg()
    {
        section=
        eval ${XARGPARES_Class_Function_Signature}
        eval ${XARGPARES_Class_Function_Body}
    }
    function _parse_line()
    {
        if [[ -z "$line" ]]; then
            return 1
        fi
        eval $line
    }

    function _parse_global_opt_and_sub_cmd_list()
    {
        while read line; do
            _reset_arg
            _parse_line
            _debug_echo "parse line=[$line]"
            
        if ((section==1)); then
            [[ -n "$func" ]] && sub_cmd_list+=( "$func" )
            [[ -n "$alia" ]] && sub_cmd_list+=( "$alia" ) && sub_cmd_alias_map["$alia"]="$func"
            
        elif ((section==5)); then

            if [[ -n "$short" || -n "$long" ]]; then
                sub_cmd_opts+=( "${short}" "${long}" )
            fi
            [[ -z "$short" && -z "$long" ]] && p_argspecs[${#p_argspecs[@]}]="$line"
            [[ -n "$short" ]] && s_optspecs["$short"]="$line"
            [[ -n "$long" ]] && l_optspecs["$long"]="$line"
        fi

        done< <(cat "${XARGPARES_CMD_SRC[@]}" | sed  -nE "$XARGPARES_REGEXP_ALL_SECTION")

    }

    function _parse_sub_cmd_opt()
    {
        while read line; do
            _reset_arg
            _parse_line || continue  #argument missing definition
            
            _debug_echo "parse sub_cmd line=[$line]"

            if [[ -n "$short" || -n "$long" ]]; then
                sub_cmd_opts+=( "${short}" "${long}" )
            fi
            [[ -z "$short" && -z "$long" ]] && p_argspecs[${#p_argspecs[@]}]="$line"
            [[ -n "$short" ]] && s_optspecs["$short"]="$line"
            [[ -n "$long" ]] && l_optspecs["$long"]="$line"

        done< <(cat "${XARGPARES_CMD_SRC[@]}" | sed  -nE "
        /^function $sub_cmd\(\)/,/^}/ { 
            ${XARGPARES_REGEXP_SECTION2}
        }")

    }
    _parse_global_opt_and_sub_cmd_list

    # find out the matched subcmd
    while (( i < cword )); do
        local x_i_x="${words[i]}"
        ((i++))
        if [[ " ${sub_cmd_list[*]} " =~ " $x_i_x " ]]; then
            sub_cmd=$x_i_x
            x_i_x="${sub_cmd_alias_map["${sub_cmd}"]}"
            if [[ -n "$x_i_x" ]]; then
                sub_cmd=$x_i_x
            fi
            break
        fi

    done


    local is_global_op=false
    if [[ "$prev" =~ ^--.* ]]; then
        [[ -n "${l_optspecs["$prev"]}" ]] && is_global_op=true
    elif [[ "$prev" =~ ^-.* ]]; then
        [[ -n "${s_optspecs["$prev"]}" ]] && is_global_op=true
    fi

    if ! $is_global_op; then
        # case 0 sub_cmd;
        if [[ -z "$sub_cmd" ]]; then
            COMPREPLY=( $( compgen -W "${sub_cmd_list[*]} ${sub_cmd_opts[*]}" -- "${cur}" ) )

            ${XTRACE:-false} && set -x
            return 0
        fi

        _parse_sub_cmd_opt
    fi

    # parse the argument here
    local is_force_pos=false
    local p_index=0

    while (( i < cword )); do
        local x_i_x="${words[i]}" # NOTE: be careful, the name should be complicated here to avoid conflict
        ((i++))
        if [[ "${x_i_x}" == "--" ]]; then
            is_force_pos=true
            continue
        fi
        local line=
        _reset_arg
        if [[ "${x_i_x}" =~ ^-[a-zA-Z0-9_].*$ ]] && ! $is_force_pos; then                   # short
            line="${s_optspecs["${x_i_x}"]}"
        elif [[ "${x_i_x}" =~ ^--[a-zA-Z0-9_].*$ ]] && ! $is_force_pos; then                # long
            line="${l_optspecs["${x_i_x}"]}"
        else                                                                                # position
            ((p_index < ${#p_argspecs[@]})) || return 0  # the rest that we have no completions for
            line="${p_argspecs[$p_index]}"
            ((p_index++))
        fi
        _debug_echo "set line=[$line]"
        _parse_line || return 0  #argument missing definition



        if [[ -z "$short" && -z "$long" ]]; then # position argument
            if [[ "$nargs" == '+' || "$nargs" == '*' ]]; then
                while (( i < cword )); do
                    local x_i_x="${words[i]}"
                    ((i++))
                    if [[ "${x_i_x}" =~ ^--?[-a-zA-Z0-9_]*$ ]]; then
                        break
                    fi
                done
            fi
        else  # option argument
            if [[ ! "$action" =~ store_.* ]];then
                if (( i < cword )); then
                    local x_i_x="${words[i]}" 
                    ((i++))
                fi
            fi
        fi
    done

    function _comp_reply_from_line()
    {
        local cmd="${XARGPARES_CMD_SRC[-1]}"
        if ((${#choices[@]})); then
            COMPREPLY=( $( compgen -W "${choices[*]}" -- "$cur" ) )
        elif [[ -n "$action" ]] && "$cmd" _xargparse_has "$action"; then
            export XCOMPLETE_PREV="$prev" XCOMPLETE_CUR="$cur" 
            local tmp_arg_choices=( $( "$cmd" "$action" ) )
            COMPREPLY=( $( compgen -W "${tmp_arg_choices[*]}" -- "$cur" ) )
        else
            _debug_echo "$filter"
            if [[ "$filter" == -dir ]]; then
                _filedir -d
            elif [[ -n "$filter" ]]; then
                _filedir "$filter"
            else
                _filedir
            fi
            
        fi
    }

    _debug_echo "p_index=$p_index, p_argspecs=${#p_argspecs[@]}"

    local line=
    _reset_arg
    if [[ "$cur" =~ -.* ]]; then
        # standard options
        COMPREPLY=( $( compgen -W "${sub_cmd_opts[*]}" -- "$cur" ) )
        return 0
    elif [[ "$prev" =~ ^--.* ]]; then
        line="${l_optspecs["${prev}"]}"
    elif [[ "$prev" =~ ^-.* ]]; then
        line="${s_optspecs["${prev}"]}"
    elif ((p_index < ${#p_argspecs[@]})); then
        line="${p_argspecs[$p_index]}"
    else
        _debug_echo "no one match"
         return 0
    fi
    _debug_echo "==>line: $line"
    _parse_line || return 0  #argument missing definition
    _comp_reply_from_line
    
    ${XTRACE:-false} && set -x
}


function _init()
{
    local dir=~/".xargparse/bash_completion.d"
    mkdir -p "$dir"
    source "$(dirname "$(realpath "$BASH_SOURCE")")/xargparse"

    while read line; do
        complete -F _xcomplete "$line"
    done < <( ls -1 "$dir" )
}

if [[ -z "$XARGPARES_VERSION" ]]; then
    _init
fi
