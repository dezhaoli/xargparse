#!/usr/bin/env -S bash
###########################################################
# @Author: dezhaoli@tencent.com
# @Date:   
# Please contact dezhaoli if you have any questions.
###########################################################


# Copyright 2009, The Android Open Source Project

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###########################################################





# : ${XARGPARES_DEBUG:=false}
# XARGPARES_MAIN_EX_NAME='main-ex'
# XARGPARES_LABEL_NAME='label'
# XARGPARES_USE_BASH_ARGV


XARGPARES_VERSION=2.2.0


XARGPARES_REGEXP_SECTION2="
/^[[:space:]]*(local[[:space:]]+)?([^[:space:]=]*)=(.*[^[:space:]])?[[:space:]]+#@[[:space:]]*(.*)/ {
    s//\4;dest=\2;default=\3;section=2;/;
    s/^[[:space:]]*([\"']?[a-zA-Z0-9_]+[\"']?)([[:space:]]*;.*)/pos=\1\2/

    s/^[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/long=\1\2/
    s/(.*;)[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1long=\2\3/

    s/^[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/short=\1\2/
    s/(.*;)[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1short=\2\3/

    s/;[[:space:]]*;/;/g
    s/^;//g
    p;
}
"
XARGPARES_REGEXP_SECTION5="
/^[[:space:]]*(local[[:space:]]+)?([^[:space:]=]*)=(.*[^[:space:]])?[[:space:]]+#@[[:space:]]*(.*)/ {
    s//\4;dest=\2;default=\3;section=5;/;

    s/^[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/long=\1\2/
    s/(.*;)[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1long=\2\3/

    s/^[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/short=\1\2/
    s/(.*;)[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1short=\2\3/

    s/;[[:space:]]*;/;/g
    s/^;//g
    p;
}
"
XARGPARES_REGEXP_ALL_SECTION="
    H
    /^##@@[[:space:]]*(kind='?label'?.*)/ {
        s//section=3;\1/
        s/;[[:space:]]*;/;/g
        p
    }
    x
    /^#@[[:space:]]*(.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
        s//section=1;func=\2;\1/
        p
        : loop_2
        n
        /^}/d
        ${XARGPARES_REGEXP_SECTION2}

        b loop_2
    }
    /^##@@[[:space:]]*(kind='?main-ex'?.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
        s//section=4;func=\2;\1/
        s/;[[:space:]]*;/;/g
        p
        : loop_5
        n
        /^}/d
        ${XARGPARES_REGEXP_SECTION5}

        b loop_5
    }"


XARGPARES_Class_Function_Signature="
    kind=
    func=
    arg=
    alia=
    flag=
    help=
    group=
"
XARGPARES_Class_Function_Body="
    dest=
    default=
    pos=
    short=
    long=
    action=
    choices=()
    nargs=
    help=
    filter=
"
XARGPARES_Class_Function_Body_Last="
    is_last=false
    l_group=
    l_func=
    l_alia=
    l_flag=
    l_help=
    l_opt_str=
    l_pos_str=

"

readonly \
        XARGPARES_VERSION \
        XARGPARES_REGEXP_SECTION2 \
        XARGPARES_REGEXP_SECTION5 \
        XARGPARES_REGEXP_ALL_SECTION \
        XARGPARES_Class_Function_Signature \
        XARGPARES_Class_Function_Body



function _xargparse_die()
{
    local msg=$1
    echo -e "error: $msg" >&2
    exit 1
}

function _xargparse_cmd_src()
{
    : ${XARGPARES_CMD_SRC:="$0"}
    [[ -r "$XARGPARES_CMD_SRC" ]] || _xargparse_die "target cmd [$XARGPARES_CMD_SRC] not found"

    XARGPARES_CMD_SRC="$(realpath "$XARGPARES_CMD_SRC")"   # convert to absolute path
}

function _xargparse_class_to_string()
{
    local class="$1"
    eval echo $(echo "$class" |sed -nE '/([a-z]+)=/s//\1=\"\$\1;\"/g ; /([a-z]+)=.*\(\)/s//\1=\"\(\$\{\1\[\*\]\}\);\"/g;p')
}

function _xargparse_print_subcmd()
{
    local column_1="$1" column_2="$2" column_0="$3" 
    printf "%2s %-30s %s \n" "${column_0}" "${column_1}" "${column_2:+: }${column_2}"
}


function _xargparse_usage_verbose()
{
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true

    local is_verbose=${1:-true}

    # _xargparse_cmd_src

    #TODO: support group's title and message 
    local -A groups
    local subcmds=( "$(_xargparse_print_subcmd 'help' "$($is_verbose && printf "show this help message and exit")")" )
    local label_str=
    local main_ex_str=


    local line=
    local section=
    eval local ${XARGPARES_Class_Function_Signature} ${XARGPARES_Class_Function_Body}
    function _reset_arg()
    {
        section=
        eval ${XARGPARES_Class_Function_Signature} ${XARGPARES_Class_Function_Body}
    }

    if $is_verbose; then
        eval local ${XARGPARES_Class_Function_Body_Last}
        function print_last()
        {
            if $is_last; then
                is_last=false
                eval "$l_group+=( \"$(_xargparse_print_subcmd \
                            "$l_func${l_alia:+ (}$l_alia${l_alia:+)}${l_opt_str:+ }${l_opt_str}${l_pos_str:+ }${l_pos_str}" \
                            "${l_help}" \
                            "$l_flag")\" )"
            fi
        }
    fi

    while read line; do
        ${XARGPARES_DEBUG:-false} && echo "#usage_verbose#line=[$line]"
        _reset_arg
        eval $line
        if ((section==1)); then
            ${XARGPARES_DEBUG:-false} && _xargparse_class_to_string "$XARGPARES_Class_Function_Signature"
            if [[ -n "$group" ]]; then
                if [[ -z "${groups[$group]}" ]]; then
                    groups[$group]=''
                fi
            else
                group=subcmds
            fi
            if $is_verbose; then
                print_last
                is_last=true
                l_group=$group
                l_func="$func"
                l_alia=$alia
                l_help="$help"
                l_flag="$flag"
                l_opt_str=
                l_pos_str=
            else
                eval "$group+=( \"$(_xargparse_print_subcmd "$func${alia:+ (}$alia${alia:+)}" )\" )"
            fi

            
        elif ((section==2)); then
            ${XARGPARES_DEBUG:-false} && _xargparse_class_to_string "$XARGPARES_Class_Function_Body"
            if $is_verbose; then
                local opt_str=
                local pos_str=
                if [[ -n "$short" && -n "$long" ]]; then
                    opt_str="${short}|${long}"
                elif [[ -n "$short" ]]; then
                    opt_str="$short"
                elif [[ -n "$long" ]]; then
                    opt_str="$long"
                fi
                if [[ -n "$opt_str" ]]; then
                    if [[ "$action" =~ ^store_.* ]]; then
                        opt_str="$opt_str"
                    elif [[ -n "$action" && "$action" != append ]]; then
                        _xargparse_die "unknown action \"$action\""
                    else
                        opt_str="$opt_str ${dest^^}"
                    fi
                    l_opt_str="${l_opt_str}[$opt_str]${opt_str:+ }"
                else
                    if [[ "$nargs" == '+' ]]; then
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}... ($default)]"
                        else
                            pos_str="${pos:-$dest}..."
                        fi
                    elif [[ "$nargs" == '*' ]]; then
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}... ($default)]"
                        else
                            pos_str="[${pos:-$dest}...]"
                        fi
                    elif [[ "$nargs" == '?' ]]; then
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest} ($default)]"
                        else
                            pos_str="[${pos:-$dest}]"
                        fi
                    else
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}]"
                        else
                            pos_str="${pos:-$dest}"
                        fi
                    fi
                    
                    l_pos_str="${l_pos_str}$pos_str${pos_str:+ }"
                    
                fi
            fi
        elif ((section==3)); then
            $is_verbose && print_last
            if [[ "$kind" == "label" ]]; then
                label_str="${label_str}$help\n"
            fi
        elif ((section==4)); then
            $is_verbose && print_last
            main_ex_str="${main_ex_str}$help\n"

        elif ((section==5)); then
            ${XARGPARES_DEBUG:-false} && _xargparse_class_to_string "$XARGPARES_Class_Function_Body"

            local opt_str=
            if [[ -n "$short" && -n "$long" ]]; then
                opt_str="${short}, ${long}"
            elif [[ -n "$short" ]]; then
                opt_str="$short"
            elif [[ -n "$long" ]]; then
                opt_str="$long"
            else
                _xargparse_die "unsupported use of positional arguments in main-ex. line: $line"
            fi

            if [[ "$action" =~ ^store_.* ]]; then
                opt_str="$opt_str"
            elif [[ -n "$action" && "$action" != append ]]; then
                _xargparse_die "unknown action \"$action\""
            else
                opt_str="$opt_str ${dest^^}"
            fi

            if [[ -n "$default" ]]; then
                opt_str="$opt_str ($default)"
            fi

            main_ex_str="${main_ex_str}$(_xargparse_print_subcmd "$opt_str" "$help")\n"
            
            
        else
            _xargparse_die "unknown line: [$line]"
        fi
    done< <(< "$XARGPARES_CMD_SRC" sed  -nE "$XARGPARES_REGEXP_ALL_SECTION")
    $is_verbose && print_last

    local group_str g
    for g in "${!groups[@]}"; do
        group_str="$(eval printf "%s\\\n" \""\${${g}[@]}"\"| sort -k 1.4)\n\n$group_str"
    done

    printf "usage: $(basename $XARGPARES_CMD_SRC) <subcommand> [options] [args]
Type '$(basename $XARGPARES_CMD_SRC) <subcommand> -h' for help on a specific subcommand.
${label_str:+\n}$label_str
Available subcommands:
$( printf "%s\n" "${subcmds[@]}"| sort -k 1.4)
${group_str:+\n}$group_str
$main_ex_str" 
    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x
    return 0
}


#@ help="auto find and parse bash arguages"
function ____()
{
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true

    if (($#==0)) && ${XARGPARES_USE_BASH_ARGV:-true}; then
        local offset=1
        local args=()
        local i=${#BASH_ARGV[@]}
        while (( i - offset > 0 )); do
            local arg="${BASH_ARGV[i - 1 - $offset]}"
            ((i=i-1))
            if [[ " ${XARGPARES_IGNORE_BASH_ARGV[*]} " =~ " $arg " ]]; then # TODO: remove this ugly code
                continue
            fi
            args[${#args[@]}]="$arg"
        done
        set -- "${args[@]}"
    fi

    parse_args "$@"

    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x
    return 0
}

#@ help="parse bash arguages, like getops"
function parse_args(){
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true
    # _xargparse_cmd_src
    local funcname=""
    for funcname in "${FUNCNAME[@]}"; do
        if [[ "$funcname" != "parse_args" && "$funcname" != "____" ]]; then
            break
        fi
    done

    local -A s_optspecs
    local -A l_optspecs
    local p_argspecs=()

    local line=


    eval local ${XARGPARES_Class_Function_Signature} ${XARGPARES_Class_Function_Body}

    function _reset_arg()
    {
        eval ${XARGPARES_Class_Function_Signature} ${XARGPARES_Class_Function_Body}
    }
    function _parse_line()
    {
        if [[ -z "$line" ]]; then
            return 1
        fi
        eval $line
    }

    function _func_usage()
    {
        local label_str=
        local opts_str="\n$(_xargparse_print_subcmd "-h, --help" "show this help message and exit")"
        local poss_str=
        while read line; do
            ${XARGPARES_DEBUG:-false} &&  echo "#func_usage#line=[$line]"
            _reset_arg
            _parse_line

            ${XARGPARES_DEBUG:-false} && _xargparse_class_to_string "$XARGPARES_Class_Function_Body"
            if (( $section == 1)); then
                if [[ $funcname == _main ]]; then
                    label_str="${help}${help:+\n}"
                else
                    label_str="$func${alia:+ (}$alia${alia:+)}${help:+: }${help}\n"
                fi
            else

                local opt_str=
                local pos_str=
                local choices_str="${choices:+ {}${choices[*]}${choices:+\}}"
                if [[ -n "$short" && -n "$long" ]]; then
                    opt_str="${short}, ${long}"
                elif [[ -n "$short" ]]; then
                    opt_str="$short"
                elif [[ -n "$long" ]]; then
                    opt_str="$long"
                fi
                if [[ -n "$opt_str" ]]; then
                    if [[ "$action" =~ ^store_.* ]]; then
                        opt_str="$opt_str"
                    elif [[ -n "$action" && "$action" != append ]]; then
                        _xargparse_die "unknown action \"$action\""
                    else
                        opt_str="$opt_str ${dest^^}"
                    fi
                    if [[ -n "$default" ]]; then
                        opt_str="$opt_str ($default)"
                    fi

                    opts_str="$opts_str\n$(_xargparse_print_subcmd "$opt_str" "$help")"
                else
                    if [[ "$nargs" == '+' ]]; then
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}...${choices_str} ($default)]"
                        else
                            pos_str="${pos:-$dest}...${choices_str}"
                        fi
                    elif [[ "$nargs" == '*' ]]; then
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}...${choices_str} ($default)]"
                        else
                            pos_str="[${pos:-$dest}...${choices_str}]"
                        fi
                    elif [[ "$nargs" == '?' ]]; then
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}${choices_str} ($default)]"
                        else
                            pos_str="[${pos:-$dest}${choices_str}]"
                        fi
                    else
                        if [[ -n "$default" ]]; then
                            pos_str="[${pos:-$dest}${choices_str} ($default)]"
                        else
                            pos_str="${pos:-$dest}${choices_str}"
                        fi
                    fi
                    
                    poss_str="$poss_str\n$(_xargparse_print_subcmd "$pos_str" "$help")"
                    
                fi
            fi
        done< <(< "$XARGPARES_CMD_SRC" sed  -nE "
        H
        x
        /^#@[[:space:]]*(.*)\nfunction [[:space:]]*($funcname)\(\).*/ {
            s//section=1;func=\2;\1/
            p
            : loop_2
            n
            /^}/d
            ${XARGPARES_REGEXP_SECTION2}

            b loop_2
        }")

        if [[ $funcname == _main ]]; then
            funcname=
        fi

        printf "${label_str}usage: $(basename $XARGPARES_CMD_SRC)${funcname:+ }${funcname} [options] [args] 

${poss_str:+"Valid args:"}${poss_str}${poss_str:+\n}
${opts_str:+"Valid options:"}${opts_str}
"

    }

    function _die()
    {
        ${XARGPARES_PARSE_MAIN_EX:-false} || _func_usage >&2
        _xargparse_die "$1"
    }

    if [[ "$#" == 1 && ( "$1" == "-h" || "$1" == "-help" || "$1" == "--help" )  ]]; then
        _func_usage
        exit 0
    fi
    
    while read line; do
        ${XARGPARES_DEBUG:-false} && echo "#parse_args#line=[$line]"
        _reset_arg
        _parse_line
        ${XARGPARES_DEBUG:-false} && _xargparse_class_to_string "$XARGPARES_Class_Function_Body"

        [[ -z "$short" && -z "$long" ]] && p_argspecs[${#p_argspecs[@]}]="$line"
        [[ -n "$short" ]] && s_optspecs["$short"]="$line"
        [[ -n "$long" ]] && l_optspecs["$long"]="$line"

    done< <(< "$XARGPARES_CMD_SRC" sed  -nE "
    /^function $funcname\(\)/,/^}/ { 
        ${XARGPARES_REGEXP_SECTION2}
    }")

    function _check_choice()
    {
        local c 
        if ((${#choices[@]})); then
            for c in "${choices[@]}"; do
                [[ "$c" == "${x_i_x}" ]] && return 0
            done
            return 1
        fi
        return 0
    }
    function _set_array_val()
    {
        _check_choice || _die "argument ${pos:-$dest}: invalid choice: '${x_i_x}' (choose from ${choices[*]})"
        eval "$dest+=( \"${x_i_x}\" )"
    }
    function _set_val()
    {
        _check_choice || _die "argument ${pos:-$dest}: invalid choice: '${x_i_x}' (choose from ${choices[*]})"
        printf -v "$dest" "%s" "${x_i_x}"
    }
    function _set_main_args()
    {

        if ${XARGPARES_PARSE_MAIN_EX:-false}; then
            if $is_positional || [[ -z "$line" ]]; then
                xargparse_main_args+=( "${x_i_x}" )
                return 0
            fi
            
        fi
        return 1
    }

    if ${XARGPARES_PARSE_MAIN_EX:-false}; then
        xargparse_main_args=()
    fi
# set -x
    
    # parse the argument here
    local is_force_pos=false
    local p_index=0
    local is_back=false

    while (( "$#" )); do
        local x_i_x="$1" # NOTE: be careful, the name should be complicated here to avoid conflict
        shift
        if [[ "${x_i_x}" == "--" ]]; then
            is_force_pos=true
            continue
        fi
        local line=
        local is_positional=false
        _reset_arg
        if [[ "${x_i_x}" =~ ^-[a-zA-Z0-9_].*$ ]] && ! $is_force_pos; then                   # short
            line="${s_optspecs["${x_i_x}"]}"
            _set_main_args && continue
        elif [[ "${x_i_x}" =~ ^--[a-zA-Z0-9_].*$ ]] && ! $is_force_pos; then                # long
            line="${l_optspecs["${x_i_x}"]}"
            _set_main_args && continue
        else                                                                                # position
            is_positional=true
            ((p_index < ${#p_argspecs[@]})) || { 
                _set_main_args && continue 
                _die "unrecognized arguments: ${x_i_x}"
            }
            line="${p_argspecs[$p_index]}"
            ((p_index++))
        fi
        ${XARGPARES_DEBUG:-false} && echo "set line=[$line]"

        

        _parse_line || _die "argument ${x_i_x}: missing definition"



        if $is_positional; then                                                             # positional argument:
            if [[ "$nargs" == '+' || "$nargs" == '*' ]]; then                               # append
                _set_array_val
                is_back=false
                while (( "$#" )); do
                    x_i_x="$1"
                    if [[ "${x_i_x}" =~ ^--?[-a-zA-Z0-9_]*$ ]]; then
                        ((p_index--))
                        is_back=true
                        break
                    fi
                    shift
                    _set_array_val
                done
            else                                                                            # set key value
                _set_val
            fi
        else                                                                                # optional argument:
            if [[ "$action" =~ ^store_.* ]];then                                             # store_
                x_i_x=${action##store_}
                _set_val
            elif [[ "$action" == append ]];then                                             # append
                (($#)) || _die "argument ${x_i_x}: expected one argument"
                x_i_x="$1"
                shift
                _set_array_val
            elif [[ -n "$action" ]]; then                                                   # custom action
                _die "unknown action \"$action\""
            else                                                                            # set key value
                (($#)) || _die "argument ${x_i_x}: expected one argument"
                x_i_x="$1"
                shift
                _set_val
            fi
        fi
    done

    # case: at lest one posional argument is parsed, dont show _xargparse_usage_verbose, instead of _func_usage
    ((p_index>0)) || _xargparse_usage

    $is_back && ((p_index++))

    while ((p_index < ${#p_argspecs[@]})); do
        _reset_arg
        line="${p_argspecs[$p_index]}"
        _parse_line
        if [[ "$nargs" == '*' || "$nargs" == '?' || -n "$default" ]]; then
            ((p_index++))
        else
            _die "the following arguments are required: ${pos:-$dest}"
        fi
        
    done

    unset -f _reset_arg _parse_line _func_usage _die _check_choice _set_array_val _set_val _set_main_args

    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x
    return 0
}

function _xargparse_usage()
{
    if ${XARGPARES_PARSE_MAIN_EX:-false}; then
        # show usage concise
        if (( ${#xargparse_main_args[@]} == 0 )); then
            _xargparse_usage_verbose false >&2
            exit 0
        fi
        # show usage verbose
        if [[ ${#xargparse_main_args[@]} == 1 && "${xargparse_main_args[0]}" == 'help' ]]; then
            _xargparse_usage_verbose  >&2
            exit 0
        fi
    fi
}
function xargparse_real_subcmd() # find the real sub command function
{
    local __func_to_find="$1"
    while read line; do
        eval ${XARGPARES_Class_Function_Signature}
        eval $line
        if [[ "${!__func_to_find}" == "$alia" ]]; then
            printf -v "${__func_to_find}" "%s" "${func}"
        fi

    done< <(< "$XARGPARES_CMD_SRC" sed  -nE "
    H
    x
    /^#@[[:space:]]*(.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
        s//func=\2;\1/
        p
    } 
    ")
}
function main()
{
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true
 
    # _xargparse_cmd_src

    # install bash-complete
    {
        local reg_f=~/".xargparse/bash_completion.d/$(basename "$XARGPARES_CMD_SRC")"
        if [[ ! -f "$reg_f" ]]; then
            touch "$reg_f"
            (($? == 0 )) && echo "Registered to bash completion: ok" || echo "Registered to bash completion: fail"
        fi
    }

    # case single command
    command -v "_main" >/dev/null 2>&1 && {
        if [[ $# == 1 && "$1" == 'help' ]]; then
            _main -h  >&2
            exit 0
        fi
        _main "$@"
        exit
    }


    XARGPARES_USE_BASH_ARGV=false
    eval local ${XARGPARES_Class_Function_Signature}

    local xargparse_main_args=("$@")

    # find main-ex function and call it
    {
        
        XARGPARES_PARSE_MAIN_EX=true
        while read line; do
            # echo "==>[$line]"
            eval ${XARGPARES_Class_Function_Signature}
            eval $line

            command -v "$func" >/dev/null 2>&1 || _xargparse_die "the function[$func] pointed to by alia[$alia] was not found"

            ${XARGPARES_DEBUG:-false} &&  echo "before: args=${xargparse_main_args[*]}" 
            "$func" "${xargparse_main_args[@]}"
            set +x
            ${XARGPARES_DEBUG:-false} &&  echo "after: args=${xargparse_main_args[@]}"
        
        done< <(< "$XARGPARES_CMD_SRC" sed  -nE "
        H
        x
        /^##@@[[:space:]]*(kind='?main-ex'?.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
            s//section=4;func=\2;\1/
            s/;[[:space:]]*;/;/g
            p
        }

        ")

        _xargparse_usage
        unset XARGPARES_PARSE_MAIN_EX
    }

   
    
    local tmp_func_name="${xargparse_main_args[0]}"
    xargparse_real_subcmd tmp_func_name
    xargparse_main_args[0]=$tmp_func_name

    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x 

    "${xargparse_main_args[@]}"

    unset xargparse_main_args
}

# call ourself
if [[ ! "$0" =~ ^-.* ]]; then  # case call from -bash
    _xargparse_cmd_src
    if [[  "$(basename "$0")" == "$(basename "$BASH_SOURCE")" ]]; then
        echo "$(basename "$0") $XARGPARES_VERSION"
        _xargparse_usage_concise
    fi

fi

