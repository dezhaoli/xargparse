#!/usr/bin/env -S bash
###########################################################
# @Author: dezhaoli@tencent.com
# @Date:   
# Please contact dezhaoli if you have any questions.
###########################################################


# Copyright 2009, The Android Open Source Project

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###########################################################



##################################################
##### the arguments below can be set outside #####
##################################################

# XARGPARES_DEBUG=true
# XARGPARES_USE_BASH_ARGV=true
# XARGPARES_SMART_MODE=true
# XARGPARES_CMD_SRC=()
# XARGPARES_CMD_SRC_CALL_ORDER=()
##################################################


XARGPARES_VERSION=3.1.0
XARGPARES_COMPLETE_DIR=~/".xargparse/bash_completion.d"
# XARGPARES_MAIN_EX_NAME='main-ex'
# XARGPARES_MAIN_NAME='_main'
# XARGPARES_LABEL_NAME='label'


XARGPARES_REGEXP_SECTION2="
/^[[:space:]]*(local[[:space:]]+)?([^[:space:]=]*)=(.*[^[:space:]])?[[:space:]]+#@[[:space:]]*(.*)/ {
    s//\4;x_dest=\2;x_default=\3;x_section=2;/;
    s/^[[:space:]]*([\"']?[a-zA-Z0-9_]+[\"']?)([[:space:]]*;.*)/x_pos=\1\2/

    s/^[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/x_long=\1\2/
    s/(.*;)[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1x_long=\2\3/

    s/^[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/x_short=\1\2/
    s/(.*;)[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1x_short=\2\3/

    s/;[[:space:]]*;/;/g
    s/^;//g
    p;
}
"
XARGPARES_REGEXP_SECTION5="
/^[[:space:]]*(local[[:space:]]+)?([^[:space:]=]*)=(.*[^[:space:]])?[[:space:]]+#@[[:space:]]*(.*)/ {
    s//\4;x_dest=\2;x_default=\3;x_section=5;/;

    s/^[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/x_long=\1\2/
    s/(.*;)[[:space:]]*([\"']?--[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1x_long=\2\3/

    s/^[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/x_short=\1\2/
    s/(.*;)[[:space:]]*([\"']?-[a-zA-Z0-9_][-a-zA-Z0-9_]*[\"']?)([[:space:]]*;.*)/\1x_short=\2\3/

    s/;[[:space:]]*;/;/g
    s/^;//g
    p;
}
"
XARGPARES_REGEXP_ALL_SECTION="
    H
    /^##@@[[:space:]]*(kind='?label'?.*)/ {
        s//x_section=3;\1/
        s/;[[:space:]]*;/;/g
        p
    }
    x
    /^#@[[:space:]]*(.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
        s//x_section=1;x_func=\2;\1/
        p
        : loop_2
        n
        /^}/d
        ${XARGPARES_REGEXP_SECTION2}

        b loop_2
    }
    /^##@@[[:space:]]*(kind='?main-ex'?.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
        s//x_section=4;x_func=\2;\1/
        s/;[[:space:]]*;/;/g
        p
        : loop_5
        n
        /^}/d
        ${XARGPARES_REGEXP_SECTION5}

        b loop_5
    }"


XARGPARES_Class_Function_Signature="
    x_section=
    x_func=
    kind=
    alias=
    flag=
    help=
    group=
"
XARGPARES_Class_Function_Body="
    x_section=
    x_dest=
    x_default=
    x_pos=
    x_short=
    x_long=
    action=
    choices=()
    nargs=
    help=
    filter=
"
XARGPARES_Class_Function_Body_Last="
    x_is_last=false
    x_l_func=
    x_l_alias=
    x_l_flag=
    x_l_help=
    x_l_group=
    x_l_opt_str=
    x_l_pos_str=

"

readonly \
        XARGPARES_VERSION \
        XARGPARES_COMPLETE_DIR \
        XARGPARES_REGEXP_SECTION2 \
        XARGPARES_REGEXP_SECTION5 \
        XARGPARES_REGEXP_ALL_SECTION \
        XARGPARES_Class_Function_Signature \
        XARGPARES_Class_Function_Body



function _xargparse_die()
{
    local msg=$1
    echo -e "error: $msg" >&2
    exit 1
}
function _xargparse_has()
{
    command -v "$1" >/dev/null 2>&1 
    return $?
}
function _xargparse_debug_echo(){
    ${XARGPARES_DEBUG:-false} && echo "$*" >> ~/Desktop/xargparse.log
    :
}
function _xargparse_debug_echo_class(){
    ${XARGPARES_DEBUG:-false} || return 0
    local class="${!1}"
    eval echo "$1:" $(echo "$class" |sed -nE '/([a-z]+)=/s//\1=\"\$\1;\"/g ; /([a-z]+)=.*\(\)/s//\1=\"\(\$\{\1\[\*\]\}\);\"/g;p') >> ~/Desktop/xargparse.log
    
}

function _xargparse_cmd_src()
{
    [[ -n "$XARGPARES_CMD_SRC" ]] && return

    _xargparse_debug_echo "BASH_SOURCE=${BASH_SOURCE[*]}"
    XARGPARES_CMD_SRC=()
    local src full_src
    for src in "${BASH_SOURCE[@]:2}"; do
        full_src="$(realpath "$src")" || _xargparse_die "target cmd [$src] not found"
        [[ " ${XARGPARES_CMD_SRC[*]} " =~ " $full_src " ]] && continue
        XARGPARES_CMD_SRC+=( "$full_src" ) # convert to absolute path
    done

    _xargparse_debug_echo "XARGPARES_CMD_SRC=${XARGPARES_CMD_SRC[*]}"
}

function _xargparse_print_subcmd()
{
    local column_1="$1" column_2="$2" column_0="$3" 
    printf "%2s %-30s %s \n" "${column_0}" "${column_1}" "${column_2:+: }${column_2}"
}


function _xargparse_usage_verbose()
{
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true

    local is_verbose=${1:-true}


    #TODO: support group's title and message 
    local -A groups
    local subcmds=( "$(_xargparse_print_subcmd 'help' "$($is_verbose && printf "show this help message and exit")")" )
    local label_str=
    local main_ex_str=


    local line=
    eval local ${XARGPARES_Class_Function_Signature} ${XARGPARES_Class_Function_Body}
    function _reset_arg()
    {
        eval ${XARGPARES_Class_Function_Signature} ${XARGPARES_Class_Function_Body}
    }

    if $is_verbose; then
        eval local ${XARGPARES_Class_Function_Body_Last}
        function print_last()
        {
            if $x_is_last; then
                x_is_last=false
                eval "$x_l_group+=( \"$(_xargparse_print_subcmd \
                            "$x_l_func${x_l_alias:+ (}$x_l_alias${x_l_alias:+)}${x_l_opt_str:+ }${x_l_opt_str}${x_l_pos_str:+ }${x_l_pos_str}" \
                            "${x_l_help}" \
                            "$x_l_flag")\" )"
            fi
        }
    fi

    while read line; do
        _xargparse_debug_echo "#usage_verbose# line=[$line]"
        _reset_arg
        eval local $line
        if ((x_section==1)); then
            _xargparse_debug_echo_class "XARGPARES_Class_Function_Signature"
            if [[ -n "$group" ]]; then
                if [[ -z "${groups[$group]}" ]]; then
                    groups[$group]=''
                fi
            else
                group=subcmds
            fi
            if $is_verbose; then
                print_last
                x_is_last=true
                x_l_group=$group
                x_l_func="$x_func"
                x_l_alias=$alias
                x_l_help="$help"
                x_l_flag="$flag"
                x_l_opt_str=
                x_l_pos_str=
            else
                eval "$group+=( \"$(_xargparse_print_subcmd "$x_func${alias:+ (}$alias${alias:+)}" )\" )"
            fi

            
        elif ((x_section==2)); then
            _xargparse_debug_echo_class "XARGPARES_Class_Function_Body"
            if $is_verbose; then
                local opt_str=
                local pos_str=
                if [[ -n "$x_short" && -n "$x_long" ]]; then
                    opt_str="${x_short}|${x_long}"
                elif [[ -n "$x_short" ]]; then
                    opt_str="$x_short"
                elif [[ -n "$x_long" ]]; then
                    opt_str="$x_long"
                fi
                if [[ -n "$opt_str" ]]; then
                    if [[ "$action" =~ ^store_.* ]]; then
                        opt_str="$opt_str"
                    elif [[ -n "$action" && "$action" != append ]] && ! _xargparse_has "$action"; then
                        _xargparse_die "unknown action \"$action\""
                    else
                        opt_str="$opt_str ${x_dest^^}"
                    fi
                    x_l_opt_str="${x_l_opt_str}[$opt_str]${opt_str:+ }"
                else
                    if [[ "$nargs" == '+' ]]; then
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}... ($x_default)]"
                        else
                            pos_str="${x_pos:-$x_dest}..."
                        fi
                    elif [[ "$nargs" == '*' ]]; then
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}... ($x_default)]"
                        else
                            pos_str="[${x_pos:-$x_dest}...]"
                        fi
                    elif [[ "$nargs" == '?' ]]; then
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest} ($x_default)]"
                        else
                            pos_str="[${x_pos:-$x_dest}]"
                        fi
                    else
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}]"
                        else
                            pos_str="${x_pos:-$x_dest}"
                        fi
                    fi
                    
                    x_l_pos_str="${x_l_pos_str}$pos_str${pos_str:+ }"
                    
                fi
            fi
        elif ((x_section==3)); then
            $is_verbose && print_last
            if [[ "$kind" == "label" ]]; then
                label_str="${label_str}$help\n"
            fi
        elif ((x_section==4)); then
            $is_verbose && print_last
            main_ex_str="${main_ex_str}$help\n"

        elif ((x_section==5)); then
            _xargparse_debug_echo_class "XARGPARES_Class_Function_Body"

            local opt_str=
            if [[ -n "$x_short" && -n "$x_long" ]]; then
                opt_str="${x_short}, ${x_long}"
            elif [[ -n "$x_short" ]]; then
                opt_str="$x_short"
            elif [[ -n "$x_long" ]]; then
                opt_str="$x_long"
            else
                _xargparse_die "unsupported use of positional arguments in main-ex. line: $line"
            fi

            if [[ "$action" =~ ^store_.* ]]; then
                opt_str="$opt_str"
            elif [[ -n "$action" && "$action" != append ]] && ! _xargparse_has "$action"; then
                _xargparse_die "unknown action \"$action\""
            else
                opt_str="$opt_str ${x_dest^^}"
            fi

            if [[ -n "$x_default" ]]; then
                opt_str="$opt_str ($x_default)"
            fi

            main_ex_str="${main_ex_str}$(_xargparse_print_subcmd "$opt_str" "$help")\n"
            
            
        else
            _xargparse_die "unknown line: [$line]"
        fi
    done< <(cat "${XARGPARES_CMD_SRC[@]}" | sed  -nE "$XARGPARES_REGEXP_ALL_SECTION")
    $is_verbose && print_last

    local group_str g
    for g in "${!groups[@]}"; do
        group_str="$(eval printf "%s\\\n" \""\${${g}[@]}"\"| sort -k 1.4)\n\n$group_str"
    done

    printf "usage: $(basename ${XARGPARES_CMD_SRC[-1]}) <subcommand> [options] [args]
Type '$(basename ${XARGPARES_CMD_SRC[-1]}) <subcommand> -h' for help on a specific subcommand.
${label_str:+\n}$label_str
Available subcommands:
$( printf "%s\n" "${subcmds[@]}"| sort -k 1.4)
${group_str:+\n}$group_str
$main_ex_str" 
    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x
    return 0
}


#@ help="auto find and parse bash arguages"
function ____()
{
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true

    if (($#==0)) && ${XARGPARES_USE_BASH_ARGV:-true}; then
        local xargparse_offset=1
        local xargparse_args=()
        local xargparse_i=${#BASH_ARGV[@]}
        while (( xargparse_i - xargparse_offset > 0 )); do
            local xargparse_arg="${BASH_ARGV[xargparse_i - 1 - $xargparse_offset]}"
            ((xargparse_i=xargparse_i-1))
            if [[ " ${XARGPARES_IGNORE_BASH_ARGV[*]} " =~ " $xargparse_arg " ]]; then # TODO: remove this ugly code
                continue
            fi
            xargparse_args[${#xargparse_args[@]}]="$xargparse_arg"
        done
        set -- "${xargparse_args[@]}"
    fi


    if ${XARGPARES_SMART_MODE:-true}; then
        local xargparse_args=()
        END_OF_OPT=
        while (( "$#" )); do
          local xargparse_arg="$1"
          shift
          case "${END_OF_OPT}${xargparse_arg}" in
            --) xargparse_args+=("$xargparse_arg"); END_OF_OPT=1 ;;
            --*=*)xargparse_args+=("${xargparse_arg%%=*}" "${xargparse_arg#*=}") ;;
            --*) xargparse_args+=("$xargparse_arg") ;;
            -*) for xargparse_i in $(seq 2 ${#xargparse_arg}); do xargparse_args+=("-${xargparse_arg:xargparse_i-1:1}"); done ;;
            *) xargparse_args+=("$xargparse_arg") ;;
          esac
        done

        set -- "${xargparse_args[@]}"
    fi

    parse_args "$@"

    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x
    return 0
}

#@ help="parse bash arguages, like getops"
function parse_args(){
    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true
    local funcname=""
    for funcname in "${FUNCNAME[@]}"; do
        if [[ "$funcname" != "parse_args" && "$funcname" != "____" ]]; then
            break
        fi
    done

    local -A s_optspecs
    local -A l_optspecs
    local p_argspecs=()

    local line=


    eval local  ${XARGPARES_Class_Function_Body}

    function _reset_arg()
    {
        eval  ${XARGPARES_Class_Function_Body}
    }
    function _parse_line()
    {
        if [[ -z "$line" ]]; then
            return 1
        fi
        eval $line
    }

    function _func_usage()
    {
        local label_str=
        local opts_str="\n$(_xargparse_print_subcmd "-h, --help" "show this help message and exit")"
        local poss_str=
        while read line; do
            _xargparse_debug_echo "#func_usage#line=[$line]"
            _reset_arg
            _parse_line

            _xargparse_debug_echo_class "XARGPARES_Class_Function_Body"
            if (( $x_section == 1)); then
                if [[ $funcname == _main ]]; then
                    label_str="${help}${help:+\n}"
                else
                    label_str="$x_func${alias:+ (}$alias${alias:+)}${help:+: }${help}\n"
                fi
            else

                local opt_str=
                local pos_str=
                local choices_str="${choices:+ {}${choices[*]}${choices:+\}}"
                if [[ -n "$x_short" && -n "$x_long" ]]; then
                    opt_str="${x_short}, ${x_long}"
                elif [[ -n "$x_short" ]]; then
                    opt_str="$x_short"
                elif [[ -n "$x_long" ]]; then
                    opt_str="$x_long"
                fi
                if [[ -n "$opt_str" ]]; then
                    if [[ "$action" =~ ^store_.* ]]; then
                        opt_str="$opt_str"
                    elif [[ -n "$action" && "$action" != append ]] && ! _xargparse_has "$action"; then
                        _xargparse_die "unknown action \"$action\""
                    else
                        opt_str="$opt_str ${x_dest^^}"
                    fi
                    if [[ -n "$x_default" ]]; then
                        opt_str="$opt_str ($x_default)"
                    fi

                    opts_str="$opts_str\n$(_xargparse_print_subcmd "$opt_str" "$help")"
                else
                    if [[ "$nargs" == '+' ]]; then
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}...${choices_str} ($x_default)]"
                        else
                            pos_str="${x_pos:-$x_dest}...${choices_str}"
                        fi
                    elif [[ "$nargs" == '*' ]]; then
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}...${choices_str} ($x_default)]"
                        else
                            pos_str="[${x_pos:-$x_dest}...${choices_str}]"
                        fi
                    elif [[ "$nargs" == '?' ]]; then
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}${choices_str} ($x_default)]"
                        else
                            pos_str="[${x_pos:-$x_dest}${choices_str}]"
                        fi
                    else
                        if [[ -n "$x_default" ]]; then
                            pos_str="[${x_pos:-$x_dest}${choices_str} ($x_default)]"
                        else
                            pos_str="${x_pos:-$x_dest}${choices_str}"
                        fi
                    fi
                    
                    poss_str="$poss_str\n$(_xargparse_print_subcmd "$pos_str" "$help")"
                    
                fi
            fi
        done< <(cat "${XARGPARES_CMD_SRC[@]}" | sed  -nE "
        H
        x
        /^#@[[:space:]]*(.*)\nfunction [[:space:]]*($funcname)\(\).*/ {
            s//x_section=1;x_func=\2;\1/
            p
            : loop_2
            n
            /^}/d
            ${XARGPARES_REGEXP_SECTION2}

            b loop_2
        }")

        if [[ $funcname == _main ]]; then
            funcname=
        fi

        printf "${label_str}usage: $(basename ${XARGPARES_CMD_SRC[-1]})${funcname:+ }${funcname} [options] [args] 

${poss_str:+"Valid args:"}${poss_str}${poss_str:+\n}
${opts_str:+"Valid options:"}${opts_str}
"

    }

    function _die()
    {
        ${XARGPARES_PARSE_MAIN_EX:-false} || _func_usage >&2
        _xargparse_die "$1"
    }

    if [[ "$#" == 1 && ( "$1" == "-h" || "$1" == "-help" || "$1" == "--help" )  ]]; then
        _func_usage
        exit 0
    fi
    
    while read line; do
        _xargparse_debug_echo "#parse_args# line=[$line]"
        _reset_arg
        _parse_line
        _xargparse_debug_echo_class "XARGPARES_Class_Function_Body"

        [[ -z "$x_short" && -z "$x_long" ]] && p_argspecs[${#p_argspecs[@]}]="$line"
        [[ -n "$x_short" ]] && s_optspecs["$x_short"]="$line"
        [[ -n "$x_long" ]] && l_optspecs["$x_long"]="$line"

    done< <(cat "${XARGPARES_CMD_SRC[@]}" | sed  -nE "
    /^function $funcname\(\)/,/^}/ { 
        ${XARGPARES_REGEXP_SECTION2}
    }")

    function _check_choice()
    {
        local c 
        if ((${#choices[@]})); then
            for c in "${choices[@]}"; do
                [[ "$c" == "${x_i_x}" ]] && return 0
            done
            return 1
        fi
        return 0
    }
    function _set_array_val()
    {
        _check_choice || _die "argument ${x_pos:-$x_dest}: invalid choice: '${x_i_x}' (choose from ${choices[*]})"
        eval "$x_dest+=( \"${x_i_x}\" )"
    }
    function _set_val()
    {
        _check_choice || _die "argument ${x_pos:-$x_dest}: invalid choice: '${x_i_x}' (choose from ${choices[*]})"
        printf -v "$x_dest" "%s" "${x_i_x}"
    }
    function _set_main_args()
    {

        if ${XARGPARES_PARSE_MAIN_EX:-false}; then
            if $is_positional || [[ -z "$line" ]]; then
                xargparse_main_args+=( "${x_i_x}" )
                return 0
            fi
            
        fi
        return 1
    }

    if ${XARGPARES_PARSE_MAIN_EX:-false}; then
        xargparse_main_args=()
    fi
# set -x
    
    # parse the argument here
    local is_force_pos=false
    local p_index=0
    local is_back=false

    while (( "$#" )); do
        local x_i_x="$1" # NOTE: be careful, the name should be complicated here to avoid conflict
        _xargparse_debug_echo "set x_i_x=[$x_i_x]"
        shift
        if [[ "${x_i_x}" == "--" ]]; then
            is_force_pos=true
            if ! ${XARGPARES_PARSE_MAIN_EX:-false}; then
                continue
            fi
        fi
        local line=
        local is_positional=false
        _reset_arg
        if [[ "${x_i_x}" =~ ^-[a-zA-Z0-9_].*$ ]] && ! $is_force_pos; then                   # short
            line="${s_optspecs["${x_i_x}"]}"
            _set_main_args && continue
        elif [[ "${x_i_x}" =~ ^--[a-zA-Z0-9_].*$ ]] && ! $is_force_pos; then                # long
            line="${l_optspecs["${x_i_x}"]}"
            _set_main_args && continue
        else                                                                                # position
            is_positional=true
            ((p_index < ${#p_argspecs[@]})) || { 
                _set_main_args && continue 
                _die "unrecognized arguments: ${x_i_x}"
            }
            line="${p_argspecs[$p_index]}"
            ((p_index++))
        fi
        _xargparse_debug_echo "set line=[$line]"

        

        _parse_line || _die "argument ${x_i_x}: missing definition"



        if $is_positional; then                                                             # positional argument:
            if [[ "$nargs" == '+' || "$nargs" == '*' ]]; then                               # append
                _set_array_val
                is_back=false
                while (( "$#" )); do
                    x_i_x="$1"
                    if [[ "${x_i_x}" =~ ^--?[-a-zA-Z0-9_]*$ ]]; then
                        ((p_index--))
                        is_back=true
                        break
                    fi
                    shift
                    _set_array_val
                done
            else                                                                            # set key value
                _set_val
            fi
        else                                                                                # optional argument:
            if [[ "$action" =~ ^store_.* ]];then                                            # store_
                x_i_x=${action##store_}
                _set_val
            elif [[ "$action" == append ]];then                                             # append
                (($#)) || _die "argument ${x_i_x}: expected one argument"
                x_i_x="$1"
                shift
                _set_array_val
            elif [[ -n "$action" ]] && ! _xargparse_has "$action"; then                     # custom action
                _die "unknown action \"$action\""
            else                                                                            # set key value
                (($#)) || _die "argument ${x_i_x}: expected one argument"
                x_i_x="$1"
                shift
                _set_val
            fi
        fi
    done

    # case: at lest one posional argument is parsed, dont show _xargparse_usage_verbose, instead of _func_usage
    ((p_index>0)) || _xargparse_usage

    $is_back && ((p_index++))

    while ((p_index < ${#p_argspecs[@]})); do
        _reset_arg
        line="${p_argspecs[$p_index]}"
        _parse_line
        if [[ "$nargs" == '*' || "$nargs" == '?' || -n "$x_default" ]]; then
            ((p_index++))
        else
            _die "the following arguments are required: ${x_pos:-$x_dest}"
        fi
        
    done

    unset -f _reset_arg _parse_line _func_usage _die _check_choice _set_array_val _set_val _set_main_args

    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x
    return 0
}

function _xargparse_usage()
{
    if ${XARGPARES_PARSE_MAIN_EX:-false}; then
        # show usage concise
        if (( ${#xargparse_main_args[@]} == 0 )); then
            _xargparse_usage_verbose false >&2
            exit 0
        fi
        # show usage verbose
        if [[ ${#xargparse_main_args[@]} == 1 && "${xargparse_main_args[0]}" == 'help' ]]; then
            _xargparse_usage_verbose  >&2
            exit 0
        fi
    fi
}
function _xargparse_real_subcmd() # find the real sub command function
{
    local __func_to_find="$1"
    while read line; do
        eval local ${XARGPARES_Class_Function_Signature}
        eval local $line
        if [[ "${!__func_to_find}" == "$alias" ]]; then
            printf -v "${__func_to_find}" "%s" "${x_func}"
        fi

    done< <(cat "${XARGPARES_CMD_SRC[@]}" | sed  -nE "
    H
    x
    /^#@[[:space:]]*(.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
        s//x_func=\2;\1/
        p
    } 
    ")
}
function main()
{
    # bug: when the subcommand call read -p 'xxx', process substitution will hold the message.
    # filter out useless information, when 'set -x'
#     _xargparse_execute "$@" 2> >( grep -v "\+ local XTRACE\|+ shopt -qo xtrace\|+ set +x" ) >&2
# }
# function _xargparse_execute()
# {
    
    # _xargparse_debug_echo "main-> [ ${BASH_SOURCE[*]} ]"
    # only execute the super main
    if [[ "${#BASH_SOURCE[@]}" != 2 ]]; then
        return 0
    fi
    # _xargparse_debug_echo "main top"


    local XTRACE XERREXIT
    shopt -qo xtrace && set +x && XTRACE=true
    [[ $- == *e* ]] && set +e && XERREXIT=true
 

    # install bash-complete
    {
        local reg_f="$XARGPARES_COMPLETE_DIR/$(basename "${XARGPARES_CMD_SRC[-1]}")"
        if [[ ! -f "$reg_f" || "${XARGPARES_CMD_SRC[-1]}" -nt "$reg_f" ]]; then
            printf '%s\n' "${XARGPARES_CMD_SRC[@]}" > "$reg_f"
            # (($? == 0 )) && echo "Registered to bash completion: ok" || echo "Registered to bash completion: fail"
            (($? == 0 )) || echo "Registered to bash completion: fail"
        fi
    }

    # case single command
    _xargparse_has "_main" && {
        if [[ $# == 1 && "$1" == 'help' ]]; then
            _main -h  >&2
            exit 0
        fi
        _main "$@"
        exit
    }


    XARGPARES_USE_BASH_ARGV=false

    local xargparse_main_args=("$@")
    # find main-ex function and call it
    function _find_and_call_main_ex()
    {
        local src_file_list=( "${XARGPARES_CMD_SRC_CALL_ORDER[@]:-${XARGPARES_CMD_SRC[@]}}" )
        _xargparse_debug_echo "find main-ex in ( ${src_file_list[@]} )"
        XARGPARES_PARSE_MAIN_EX=true
        while read line; do
            eval local ${XARGPARES_Class_Function_Signature}
            eval local $line

            _xargparse_has "$x_func" || _xargparse_die "the function[$x_func] pointed to by kind[$kind] was not found"

            _xargparse_debug_echo "before: xargparse_main_args=${xargparse_main_args[*]}" 
            "$x_func" "${xargparse_main_args[@]}"
            shopt -qo xtrace && set +x && XTRACE=true
            _xargparse_debug_echo "after: xargparse_main_args=${xargparse_main_args[@]}"
        
        done< <(cat "${src_file_list[@]}" | sed  -nE "
        H
        x
        /^##@@[[:space:]]*(kind='?main-ex'?.*)\nfunction [[:space:]]*([^[:space:]]*)\(\).*/ {
            s//x_section=4;x_func=\2;\1/
            s/;[[:space:]]*;/;/g
            p
        }

        ")

        _xargparse_usage
        unset XARGPARES_PARSE_MAIN_EX
    }
    _find_and_call_main_ex
    unset _find_and_call_main_ex
   
    
    local tmp_func_name="${xargparse_main_args[0]}"
    _xargparse_real_subcmd tmp_func_name
    xargparse_main_args[0]=$tmp_func_name

    _xargparse_debug_echo "${xargparse_main_args[@]}..."
    ${XERREXIT:-false} && set -e
    ${XTRACE:-false} && set -x 

    "${xargparse_main_args[@]}"

}


if [[ ! "$0" =~ ^-.* ]]; then  # case not call from -bash
    _xargparse_cmd_src
    if [[  "$(basename "$0")" == "$(basename "$BASH_SOURCE")" ]]; then # call ourself
        echo "$(basename "$0") $XARGPARES_VERSION" 
    fi

fi

